@model Predictive_Diversion_Control.Models.encapData



<head>
    <style>
        #map {
            height: 400px;
            width: 100%;
        }
    </style>
</head>
<body style="padding-bottom:20px;margin-top:20px;">
    <div id="map" style="border-radius:200px;"></div>
    <script>
        var map;
        var markersArray = [];
        var heroinBubblesArray = [];
        var prescriptionBubblesArray = [];
        var numDeaths = 0;
        var numFacilities = 0;
      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          zoom: 6.7,
          center: new google.maps.LatLng(47.402,-120.311)
          });

          map.addListener('click', function (e) {
              placeMarker(e.latLng, map);
          });
          map.addListener('contextmenu', function (e) {
              delMarker(marker);
          });
        
        addFaciityMarkers();
        addHeroinMarkers();
          addPrescribMarkers();
          
      }

      // Loop through the results array and place a marker for each
      // set of coordinates.
      function addFaciityMarkers() {
        var facList = @Html.Raw(Json.Encode(Model.waTreatmentCenters));
          for (var i = 0; i < facList.length; i++) {
              var contentString = facList[i].ProgramName;
            var latLng = new google.maps.LatLng(parseFloat(facList[i].latitude), parseFloat(facList[i].longitude));
            var marker = new google.maps.Marker({
            position: latLng,
                map: map,
                content: contentString
              });
              markersArray[i] = marker;
        var infowindow = new google.maps.InfoWindow({
            content: contentString
            
              });
              //alert(infowindow.content);
              google.maps.event.addListener(marker, "click", function (point) { infowindow.setContent(this.content); infowindow.open(map, this); });
        }
      }

      function addHeroinMarkers() {
        var facList = @Html.Raw(Json.Encode(Model.heroinOverdoseList));
        for (var i = 0; i < facList.length; i++) {
            //alert(facList[i].latitude + " " + facList[i].longitude);
          var latLng = new google.maps.LatLng(parseFloat(facList[i].latitude), parseFloat(facList[i].longitude));
          var radius = 150 * facList[i].count;
        var circle = new google.maps.Circle({
            strokeColor: '#de31b5',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#de31b5',
            fillOpacity: 0.35,
            map: map,
            center: latLng,
            radius: radius
            });
            heroinBubblesArray[i] = circle;
        }
      }

      function addPrescribMarkers() {
        var facList = @Html.Raw(Json.Encode(Model.prescriptionOverdoseList));
        for (var i = 0; i < facList.length; i++) {
          var latLng = new google.maps.LatLng(parseFloat(facList[i].latitude), parseFloat(facList[i].longitude));
          var radius = 150 * facList[i].count;
        var circle = new google.maps.Circle({
            strokeColor: '#5080ef',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#5080ef',
            fillOpacity: 0.35,
            map: map,
            center: latLng,
            radius: radius
            });

            prescriptionBubblesArray[i] = circle;
        }
        }

   
        function placeMarker(position, map) {
            var marker = new google.maps.Marker({

                position: position,
                map: map,
                draggable:true,
                icon: 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png'
            });
            map.panTo(position);
            var infowindow = new google.maps.InfoWindow({
               

            });
            var heurVal = Math.round(smartMaths(marker.position.lat(), marker.position.lng())*1000)/1000;

            google.maps.event.addListener(marker, "rightclick", function (point) { delMarker(marker) });
            google.maps.event.addListener(marker, "click", function (point) { infowindow.setContent("Heuristic: " + Math.round((smartMaths(this.position.lat(), this.position.lng()))*1000)/1000 + "<br/>Deaths: " + numDeaths + "<br/># of Facilities: " + numFacilities); infowindow.open(map, this) });
            google.maps.event.addListener(marker, "dragstart", function (event) {
                infowindow.close()
            });
        google.maps.event.addListener(marker, "dragend", function (event) {
            infowindow.setContent("Heuristic: " + Math.round((smartMaths(this.position.lat(), this.position.lng())) * 1000) / 1000 + "<br/>Deaths: " + numDeaths + "<br/># of Facilities: " + numFacilities); infowindow.open(map, this) 

            });
            infowindow.setContent("Heuristic: " + heurVal + "<br/>Deaths: " + numDeaths + "<br/># of Facilities: " + numFacilities);
            infowindow.open(map,marker);
        }
        var delMarker = function (markerPar) {
            markerPar.setMap(null);
        }
        function clearMarkers()
        {
            if (!document.getElementById("checkBox").checked) {
                for (var i = 0; i < markersArray.length; i++) {
                    markersArray[i].setMap(null);
                }
                markersArray.length = 0;
            }
            else
            {
                addFaciityMarkers();
            }
        }
        function clearHeroinBubbles()
        {
            if (!document.getElementById("heroinBox").checked) {
                for (var i = 0; i < heroinBubblesArray.length; i++) {
                    heroinBubblesArray[i].setMap(null);
                }
                heroinBubblesArray.length = 0;


            }
            else {
                addHeroinMarkers();
            }
        };
        function clearPrescriptionBubbles() {

            if (!document.getElementById("prescriptionBox").checked) {
                
                for (var i = 0; i < prescriptionBubblesArray.length; i++) {
                
                    prescriptionBubblesArray[i].setMap(null);
                }
                prescriptionBubblesArray.length = 0;

            }
            else {
                addPrescribMarkers();
            }
        };
        function smartMaths(lat2, long2)
        {
            numDeaths = 0;
            numFacilities = 0;
            var lat = lat2;
            var long = long2;

            var herList = @Html.Raw(Json.Encode(Model.heroinOverdoseList));
            var presList = @Html.Raw(Json.Encode(Model.prescriptionOverdoseList));
            var facList = @Html.Raw(Json.Encode(Model.waTreatmentCenters));

           

            for (var i = 0; i < herList.length; i++)
            {
                if (herList[i].latitude < lat + 1 && herList[i].latitude > lat - 1) {
                    if (herList[i].longitude < long + 1 && herList[i].longitude > long - 1)
                        
                        numDeaths = numDeaths + herList[i].count;
                }
            }
            for (var i = 0; i < presList.length; i++)
            {
                if (presList[i].latitude < lat + 1 && presList[i].latitude > lat - 1) {
                    if (presList[i].longitude < long + 1 && presList[i].longituide > long - 1)
                        numDeaths = numDeaths + presList[i].count;
                }
            }
            for (var i = 0; i < facList.length; i++)
            {
                if (facList[i].latitude < lat + 1 && facList[i].latitude > lat - 1) {
                    if (facList[i].longitude < long + 1 && facList[i].longitude > long - 1)
                        numFacilities++;
                }
            }
            var cost = 0;
            if (numFacilities == 0) {
                cost = Math.log2(numDeaths);
            }
            else {
                cost = Math.log2(numDeaths) / numFacilities;
            }
            
            return cost;
            //alert(numDeaths);
            //alert(numFacilities);
        };

    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyARc3jQX3XqeCGAVh5DNSI3hTPKg6seHWs&callback=initMap">
    </script>

</body>
<div style="background-color:black; padding:10px;margin-top:20px;text-align:center;margin: 0 auto;width: 500px;height:170px;border-bottom-left-radius:25px;border-bottom-right-radius:25px; ">
    <h2 style="color:lightgrey;">Legend</h2>
    <p style="color:lightgrey"><input id="checkBox" type="checkbox" onclick="clearMarkers()" checked="checked" /> Facilities<img src="http://maps.google.com/mapfiles/ms/icons/red-dot.png" /> Impact Facility<img src="http://maps.google.com/mapfiles/ms/icons/yellow-dot.png" /></p> 

    <p style="color:lightgrey"><input id="prescriptionBox" type="checkbox" onclick="clearPrescriptionBubbles()" checked="checked" />Prescription Deaths <img style="width:20px;height:20px;" src="http://www.clker.com/cliparts/0/w/P/n/G/3/blue-circle-md.png" /> <input id="heroinBox" type="checkbox" onclick="clearHeroinBubbles()" checked="checked" /> Heroin Deaths <img style="width:25px;height:25px;" src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/Location_dot_red.svg/1000px-Location_dot_red.svg.png" /><p />

</div>
